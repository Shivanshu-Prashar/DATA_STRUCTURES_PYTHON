class Tree:
    def __init__(self,data):
        self.data=data
        self.leftchild=None
        self.rightchild=None
N1=Tree("N1")
N2=Tree("N2")
N3=Tree("N3")
N4=Tree("N4")
N5=Tree("N5")
N6=Tree("N6")
N7=Tree("N7")
N8=Tree("N8")
N9=Tree("N9")

N1.leftchild=N2
N1.rightchild=N3

N2.leftchild=N4
N2.rightchild=N5

N4.leftchild=N8
N4.rightchild=N9

N3.leftchild=N6
N3.rightchild=N7

# PREORDER TRAVERSAL  [root node ---> left child ---> right child]

def PreOrderTraversal(root):
    if not root:
        return
    print(root.data,"-->",end=" ")
    PreOrderTraversal(root.leftchild)
    PreOrderTraversal(root.rightchild)
print("......................PreOrderTraversing........................   ")
PreOrderTraversal(N1)

# POSTORDER TRAVERSAL [ left child ---> right child --> root node ]

def PostOrderTraversal(root):
    if not root:
        return
    PostOrderTraversal(root.leftchild)
    PostOrderTraversal(root.rightchild)
    print(root.data,"-->",end=" ")
print("\n......................PostOrderTraversing........................")
PostOrderTraversal(N1)

# INORDER TRAVERSAL [ Left ---> Root ---> Right ]
def InOrder(root):
    if not root:
        return
    InOrder(root.leftchild)
    print(root.data,"-->",end=" ")
    InOrder(root.rightchild)
print("\n......................InOrderTraversing..........................")
InOrder(N1)
print("\n")
